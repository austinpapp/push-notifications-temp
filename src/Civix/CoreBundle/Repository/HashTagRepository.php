<?php

namespace Civix\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Civix\CoreBundle\Entity\Micropetitions\Petition;
use Civix\CoreBundle\Entity\Poll\Question;
use Civix\CoreBundle\Entity\Poll\Question\Petition as PollPetition;
use Civix\CoreBundle\Entity\HashTag;
use Civix\CoreBundle\Parser\Tags as HashTagParser;

/**
 * HashTagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HashTagRepository extends EntityRepository
{
    /**
     * @param Petition $petition
     * @param bool $saveTagsInEntity
     */
    public function addForPetition(Petition $petition, $saveTagsInEntity = true)
    {
        $em = $this->getEntityManager();
        $tags = HashTagParser::parseHashTags($petition->getPetitionBody());
        foreach ($tags['parsed'] as $tag) {
            $entity = $this->findOneByName($tag);
            if (!$entity) {
                $entity = new HashTag($tag);
                $em->persist($entity);
            }
            $entity->addPetition($petition);
            $em->flush($entity);
        }

        if ($saveTagsInEntity) {
            $petition->setCachedHashTags($tags['original']);
            $em->flush($petition);
        }
    }

    /**
     * @param Question $question
     * @param bool $saveTagsInEntity
     */
    public function addForQuestion(Question $question, $saveTagsInEntity = true)
    {
        $em = $this->getEntityManager();
        if ($question instanceof PollPetition) {
            $tags = HashTagParser::parseHashTags($question->getPetitionBody());
        } else {
            $tags = HashTagParser::parseHashTags($question->getSubject());
        }
        foreach ($tags['parsed'] as $tag) {
            $entity = $this->findOneByName($tag);
            if (!$entity) {
                $entity = new HashTag($tag);
                $em->persist($entity);
            }
            $entity->addQuestion($question);
            $em->flush($entity);
        }

        if ($saveTagsInEntity) {
            $question->setCachedHashTags($tags['original']);
            $em->flush($question);
        }
    }
}
