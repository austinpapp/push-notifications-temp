<?php

namespace Proxies\__CG__\Civix\BalancedBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PaymentHistory extends \Civix\BalancedBundle\Entity\PaymentHistory implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setPublicId($publicId)
    {
        $this->__load();
        return parent::setPublicId($publicId);
    }

    public function getPublicId()
    {
        $this->__load();
        return parent::getPublicId();
    }

    public function setAmount($amount)
    {
        $this->__load();
        return parent::setAmount($amount);
    }

    public function getAmount()
    {
        $this->__load();
        return parent::getAmount();
    }

    public function setCurrency($currency)
    {
        $this->__load();
        return parent::setCurrency($currency);
    }

    public function getCurrency()
    {
        $this->__load();
        return parent::getCurrency();
    }

    public function getReference()
    {
        $this->__load();
        return parent::getReference();
    }

    public function setReference($reference)
    {
        $this->__load();
        return parent::setReference($reference);
    }

    public function getData()
    {
        $this->__load();
        return parent::getData();
    }

    public function setData($data)
    {
        $this->__load();
        return parent::setData($data);
    }

    public function getState()
    {
        $this->__load();
        return parent::getState();
    }

    public function setState($state)
    {
        $this->__load();
        return parent::setState($state);
    }

    public function getFromUser()
    {
        $this->__load();
        return parent::getFromUser();
    }

    public function setFromUser($fromUser)
    {
        $this->__load();
        return parent::setFromUser($fromUser);
    }

    public function getToUser()
    {
        $this->__load();
        return parent::getToUser();
    }

    public function setToUser($toUser)
    {
        $this->__load();
        return parent::setToUser($toUser);
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function beforePersist()
    {
        $this->__load();
        return parent::beforePersist();
    }

    public function beforeUpdate()
    {
        $this->__load();
        return parent::beforeUpdate();
    }

    public function isCredit()
    {
        $this->__load();
        return parent::isCredit();
    }

    public function isDebit()
    {
        $this->__load();
        return parent::isDebit();
    }

    public function setBalancedUri($balancedUri)
    {
        $this->__load();
        return parent::setBalancedUri($balancedUri);
    }

    public function setQuestionId($question_id)
    {
        $this->__load();
        return parent::setQuestionId($question_id);
    }

    public function getQuestionId()
    {
        $this->__load();
        return parent::getQuestionId();
    }

    public function getPublicData()
    {
        $this->__load();
        return parent::getPublicData();
    }

    public function getDataAsArray()
    {
        $this->__load();
        return parent::getDataAsArray();
    }

    public function getBalancedUri()
    {
        $this->__load();
        return parent::getBalancedUri();
    }

    public function isSucceeded()
    {
        $this->__load();
        return parent::isSucceeded();
    }

    public function isPending()
    {
        $this->__load();
        return parent::isPending();
    }

    public function isOK()
    {
        $this->__load();
        return parent::isOK();
    }

    public function setOrderId($orderId)
    {
        $this->__load();
        return parent::setOrderId($orderId);
    }

    public function getOrderId()
    {
        $this->__load();
        return parent::getOrderId();
    }

    public function isPaidOut()
    {
        $this->__load();
        return parent::isPaidOut();
    }

    public function setPaidOut($paidOut)
    {
        $this->__load();
        return parent::setPaidOut($paidOut);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'publicId', 'orderId', 'amount', 'currency', 'reference', 'data', 'state', 'balancedUri', 'updatedAt', 'createdAt', 'question_id', 'paidOut', 'fromUser', 'toUser');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}