<?php

namespace Proxies\__CG__\Civix\CoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BaseComment extends \Civix\CoreBundle\Entity\BaseComment implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setCommentBody($commentBody)
    {
        $this->__load();
        return parent::setCommentBody($commentBody);
    }

    public function getCommentBody()
    {
        $this->__load();
        return parent::getCommentBody();
    }

    public function setParentComment(\Civix\CoreBundle\Entity\BaseComment $parentComment = NULL)
    {
        $this->__load();
        return parent::setParentComment($parentComment);
    }

    public function getParentComment()
    {
        $this->__load();
        return parent::getParentComment();
    }

    public function setUser(\Civix\CoreBundle\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setDefaultData()
    {
        $this->__load();
        return parent::setDefaultData();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setRateSum($rateSum)
    {
        $this->__load();
        return parent::setRateSum($rateSum);
    }

    public function getRateSum()
    {
        $this->__load();
        return parent::getRateSum();
    }

    public function setRateStatus($userStatus)
    {
        $this->__load();
        return parent::setRateStatus($userStatus);
    }

    public function getRateStatus()
    {
        $this->__load();
        return parent::getRateStatus();
    }

    public function getRates()
    {
        $this->__load();
        return parent::getRates();
    }

    public function getParentId()
    {
        $this->__load();
        return parent::getParentId();
    }

    public function setPrivacy($privacy)
    {
        $this->__load();
        return parent::setPrivacy($privacy);
    }

    public function getPrivacy()
    {
        $this->__load();
        return parent::getPrivacy();
    }

    public function setIsOwner($status)
    {
        $this->__load();
        return parent::setIsOwner($status);
    }

    public function getIsOwner()
    {
        $this->__load();
        return parent::getIsOwner();
    }

    public function getCommentPicture()
    {
        $this->__load();
        return parent::getCommentPicture();
    }

    public function getUserInfo()
    {
        $this->__load();
        return parent::getUserInfo();
    }

    public function addChildrenComment(\Civix\CoreBundle\Entity\BaseComment $childrenComments)
    {
        $this->__load();
        return parent::addChildrenComment($childrenComments);
    }

    public function removeChildrenComment(\Civix\CoreBundle\Entity\BaseComment $childrenComments)
    {
        $this->__load();
        return parent::removeChildrenComment($childrenComments);
    }

    public function getChildrenComments()
    {
        $this->__load();
        return parent::getChildrenComments();
    }

    public function addRate(\Civix\CoreBundle\Entity\Poll\CommentRate $rates)
    {
        $this->__load();
        return parent::addRate($rates);
    }

    public function removeRate(\Civix\CoreBundle\Entity\Poll\CommentRate $rates)
    {
        $this->__load();
        return parent::removeRate($rates);
    }

    public function setRatesCount($ratesCount)
    {
        $this->__load();
        return parent::setRatesCount($ratesCount);
    }

    public function getCommentBodyHtml()
    {
        $this->__load();
        return parent::getCommentBodyHtml();
    }

    public function setCommentBodyHtml($commentBodyHtml)
    {
        $this->__load();
        return parent::setCommentBodyHtml($commentBodyHtml);
    }

    public function getRatesCount()
    {
        $this->__load();
        return parent::getRatesCount();
    }

    public function getRateUp()
    {
        $this->__load();
        return parent::getRateUp();
    }

    public function getRateDown()
    {
        $this->__load();
        return parent::getRateDown();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'commentBody', 'commentBodyHtml', 'createdAt', 'rateSum', 'ratesCount', 'privacy', 'parentComment', 'childrenComments', 'user', 'rates');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}