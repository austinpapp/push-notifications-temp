<?php

namespace Proxies\__CG__\Civix\CoreBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ActivityCondition extends \Civix\CoreBundle\Entity\ActivityCondition implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setGroupId($groupId)
    {
        $this->__load();
        return parent::setGroupId($groupId);
    }

    public function getGroupId()
    {
        $this->__load();
        return parent::getGroupId();
    }

    public function setDistrictId($districtId)
    {
        $this->__load();
        return parent::setDistrictId($districtId);
    }

    public function getDistrictId()
    {
        $this->__load();
        return parent::getDistrictId();
    }

    public function setIsSuperuser($isSuperuser)
    {
        $this->__load();
        return parent::setIsSuperuser($isSuperuser);
    }

    public function getIsSuperuser()
    {
        $this->__load();
        return parent::getIsSuperuser();
    }

    public function setUserId($userId)
    {
        $this->__load();
        return parent::setUserId($userId);
    }

    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function setGroupSectionId($sectionId)
    {
        $this->__load();
        return parent::setGroupSectionId($sectionId);
    }

    public function getGroupSectionId()
    {
        $this->__load();
        return parent::getGroupSectionId();
    }

    public function setActivity(\Civix\CoreBundle\Entity\Activity $activity = NULL)
    {
        $this->__load();
        return parent::setActivity($activity);
    }

    public function getActivity()
    {
        $this->__load();
        return parent::getActivity();
    }

    public function setUsers($users)
    {
        $this->__load();
        return parent::setUsers($users);
    }

    public function getUsers()
    {
        $this->__load();
        return parent::getUsers();
    }

    public function addUsers(\Civix\CoreBundle\Entity\User $user)
    {
        $this->__load();
        return parent::addUsers($user);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'groupId', 'districtId', 'isSuperuser', 'userId', 'groupSectionId', 'activity', 'users');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}