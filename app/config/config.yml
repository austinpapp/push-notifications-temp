imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    #translator:      { fallback: %locale% }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: %kernel.debug%
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    #router_proxy:   { path: /_proxy }

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%
    form:
        resources:
            - 'CivixFrontBundle::fields.html.twig'
            - 'CivixFrontBundle::imageField.html.twig'
    globals:
        stripe_publishable_key: %stripe_publishable_key%

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false   
    #bundles:        [ ]
    #java: /usr/bin/java
    filters:
        lessphp:
            file: %kernel.root_dir%/../vendor/leafo/lessphp/lessc.inc.php
            apply_to: "\.less$"
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8   
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        auto_mapping: true
        resolve_target_entities:
            Civix\BalancedBundle\Model\BalancedUserInterface: Civix\CoreBundle\Entity\Customer\Customer

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    encryption: 'tls'
    spool:     { type: memory }
    
    
mopa_bootstrap:
    navbar: ~
    
knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: MopaBootstrapBundle:Pagination:sliding.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template

ewz_recaptcha:
    public_key:   %recaptcha_public_key%
    private_key:  %recaptcha_private_key%
    locale_key:   %recaptcha_locale_key%
    enabled:      %recaptcha_enabled%

knp_gaufrette:
    stream_wrapper: ~
    adapters:
        avatar_image_adapter:
            aws_s3:
               service_id: 'aws_s3.client'
               bucket_name: %amazon_s3.bucket%
               options:
                   directory: 'avatars'
        avatar_source_image_adapter:
            aws_s3:
                service_id: 'aws_s3.client'
                bucket_name: %amazon_s3.bucket%
                options:
                    directory: 'avatars/src'
        avatar_representative_adapter:
            aws_s3:
                service_id: 'aws_s3.client'
                bucket_name: %amazon_s3.bucket%
                options:
                    directory: 'avatars/representatives'
        educational_image_adapter:
            aws_s3:
                service_id: 'aws_s3.client'
                bucket_name: %amazon_s3.bucket%
                options:
                    directory: 'educational'
        blog_post_adapter:
            aws_s3:
                service_id: 'aws_s3.client'
                bucket_name: %amazon_s3.bucket%
                options:
                    directory: 'posts'
    filesystems:
        avatar_image_fs:
            adapter: avatar_image_adapter
        avatar_source_image_fs:
            adapter: avatar_source_image_adapter
        avatar_representative_fs:
            adapter: avatar_representative_adapter
        educational_image_fs:
            adapter: educational_image_adapter
        blog_post_fs:
            adapter: blog_post_adapter

vich_uploader:
    db_driver: orm
    gaufrette: true
    storage: vich_uploader.storage.gaufrette
    mappings:
        avatar_image:
            uri_prefix: %amazon_s3.url%/avatars
            upload_destination: avatar_image_fs
            namer: vich_uploader.namer_uniqid
        avatar_source_image:
            uri_prefix: %amazon_s3.url%/avatars/src
            upload_destination: avatar_source_image_fs
            namer: vich_uploader.namer_uniqid
        avatar_representative:
            uri_prefix: %amazon_s3.url%/avatars/representatives
            upload_destination: avatar_representative_fs
            namer: vich_uploader.namer_uniqid
        educational_image:
            uri_prefix: %amazon_s3.url%/educational
            delete_on_update: true
            delete_on_remove: true
            upload_destination: educational_image_fs
            namer: vich_uploader.namer_uniqid
        post_image:
            uri_prefix: %amazon_s3.url%/posts
            delete_on_update: true
            delete_on_remove: true
            upload_destination: blog_post_fs
            namer: vich_uploader.namer_uniqid

old_sound_rabbit_mq:
    connections: %rabbitmq_connections%
    
    # define producers
    producers:
        push_queue:
            connection:         default
            exchange_options:   {name: 'push-queue', type: direct}
        push:
            connection:         default
            exchange_options:   {name: 'push-sender', type: direct}

    # define consumers
    consumers:
        push_queue:
            connection:         default
            exchange_options:   {name: 'push-queue', type: direct }
            queue_options:      {name: 'push-queue'}
            callback:           civix_core.rabbit.push_test

civix_balanced:
    api_key: %balanced_payment_api_key%
    user_class: Civix\CoreBundle\Entity\Customer\Customer
    marketplace_user_id: %balanced_payment_marketplace_user_id%
